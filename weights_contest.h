#include "nnom.h"

/* Weights, bias and Q format */
#define TENSOR_CONV1D_KERNEL_0 {-28, -40, -41, -4, 33, -72, 33, 19, -62, 32, 25, 39, -10, -30, -43, 4, -19, -49, -27, -25, 30, 46, 24, -2, -24, -33, 17, -25, 28, 57, -17, -38, -38, -35, 5, 36, 37, 38, 9, -8, 23, 65, -36, 16, 19, 31, -9, -7, -55, -25, 15, -30, 7, -63, 19, 13, 21, 49, 20, 35, 66, -2, -32, 28, 64, 18, -7, 32, 59, -26, -13, 25, -36, -21, 71, -18, -27, -43, -23, -23}

#define TENSOR_CONV1D_KERNEL_0_DEC_BITS {4}

#define TENSOR_CONV1D_BIAS_0 {19, -72, 55, 22, -14, 49, 19, -1, 30, 15, -89, -9, -28, -17, 11, 7}

#define TENSOR_CONV1D_BIAS_0_DEC_BITS {8}

#define CONV1D_BIAS_LSHIFT {3}

#define CONV1D_OUTPUT_RSHIFT {8}

#define TENSOR_CONV1D_1_KERNEL_0 {21, 83, 15, -67, 77, -79, -71, 3, -35, -62, -44, 62, 38, -13, 43, 41, -77, -68, 13, 61, -79, 9, 63, -4, 95, 6, 107, 12, -14, -22, -59, 16, 14, 85, 43, 61, -87, -22, 49, 8, 8, 35, 66, -17, -95, -61, 61, -35, -99, -13, -109, -64, -32, -32, -37, 65, -45, 55, 60, 94, 44, 66, 45, -52, -16, 46, 42, 39, -6, 46, 71, 77}

#define TENSOR_CONV1D_1_KERNEL_0_DEC_BITS {5}

#define TENSOR_CONV1D_1_BIAS_0 {14, -9, 89, 18, -26, 35, 9, -58}

#define TENSOR_CONV1D_1_BIAS_0_DEC_BITS {9}

#define CONV1D_1_BIAS_LSHIFT {3}

#define CONV1D_1_OUTPUT_RSHIFT {9}

#define TENSOR_CONV1D_2_KERNEL_0 {-25, 3, 13, -23, -22, -29, -19, 7, 23, 23, 6, 24, 20, 21, 4, -27, -13, -24, -6, -3, 28, 4, 27, 20, 20, 1, -4, -26, 27, 14, -14, -51, -5, -10, 10, -4, -22, 24, 42, 24, 5, -14, 12, -8, -6, -45, -47, 3, 32, -12, 3, -38, -17, 14, -19, 32, -18, 27, -54, -14, 66, -8, -28, 32, 18, 51, 2, -41, 21, -23, 4, -50, -15, 25, -2, -50, -7, -57, -43, -28, -16, 21, -8, 3, 15, 0, 36, -22, 46, 21, 41, -48, -5, 14, -14, -11, 19, 1, -4, 24, 21, 53, -41, 67}

#define TENSOR_CONV1D_2_KERNEL_0_DEC_BITS {4}

#define TENSOR_CONV1D_2_BIAS_0 {-6, -28, -25, 2, -15, -67, -28, 6}

#define TENSOR_CONV1D_2_BIAS_0_DEC_BITS {8}

#define CONV1D_2_BIAS_LSHIFT {3}

#define CONV1D_2_OUTPUT_RSHIFT {8}

#define TENSOR_CONV1D_3_KERNEL_0 {-48, 61, 65, -72, -40, 36, -75, 20, 104, -41, 35, -82, -37, 1, -35, -69, -45, 78, 40, -11, -34, 36, 70, -109, -5, 13, 3, 60, 72, 90, 15, 8, 3, 40, 26, -22, 7, -23, -13, -18, -67, -18, -71, 3, 79, -45, -27, -21, -41, 94, 82, 65, -68, -56, -99, -33, -35, -68, 62, 92, -42, 13, -37, 11, 83, -2, -54, -60, 66, -15, -5, -37, 95, 76, 50, 81, 27, -3, 33, -24, -48, -27, -40, -13, -37, -72, -53, -18, 77, -9, 6, -37, 1, -75, -39, -14, -43, -51, -30, -42, 36, 19, 39, 5, 24, 50, -54, 21, 19, -18, -46, 44, -19, -46, 1, -17, -36, 31, -16, 41, 50, -47, -28, 37, -25, -51, 26, -21, 44, 11, -26, 55, 10, 19, -4, -1, -24, 41, -67, 52, -22, 46, -37, 21, 9, -14, 4, 18, 31, 38, -35, 57, -24, -10, 49, 13, -23, -31, 18, 40, 8, -11, 10, -4, 41, 49, -25, 27, 20, 32, 30, 31, 30, -19, 52, -1, -49, 18, 43, -35, 45, 37, -37, -41, -22, 7, -25, -25, -44, -18, -21, -8, 25, -21, -15, 11, -35, 60, 58, 26, -27, -30, -53, 29, -70, -68, -7, -15, -44, 18, 0, 57, 48, 36, -38, 62, 46, 12, 19, 8, 52, -57, -70, -27, -41, -46, -15, -44, -29, -33, -38, 38, 15, -32, 16, 64, -41, 30, -55, -32, 2, 34, 38, -5, 27, 22, -35, 16, 36, -37, -3, 24, -8, 33, 39, -58, 22, -65, 69, -34, -14, 41, 59, 13, -61, 29, 53, 11, -7, -9, 46, -18, -14, -8, -22, 51, 54, -14, 62, -57, 63, -1, -53, -2, -21, -34, -2, 47, 10, 36, -21, 16, 16, -16, 15, -9, -47, 21, 34, -8, 15, 52, -13, 52, 36, 24, -10, -43, 10, -13, -42, 43, -41, 6, 2, 40, 44, -58, 46, -52, 42, -50, -4, 21, -28, -69, -25, 33, 10, -35, 0, 21, 9, -68, -48, 11, -21, -24, 50, -44, -44, 41, 23, -24, -25, 52, 24, -33, 57, -52, -9, -36, 55, 24, -22, -7, -14, 13, 1, 43, -6, -43, 76, 54, -4, 38, -11, 64, -2, -22, -43, -38, -40, 49, -31, -1, 15, 47, 55, 35, 50, 47, 68, 5, 8, 42, 11, 36, -13, 33, 3, -30, 10, 24, -21, -20, 21, -22, 23, -26, -20, -31, -5, 32, -19, 11, 36, -30, -8, 2, -31, 40, 3, 7, 14, 29, 20, -4, -41, -28, -11, -35, 15, -18, 19, -2, -18, -15, 7, -26, -5, -48, 27, -40, 20, 5, 6, -27, 18, 10, -8, -40, -20, 33, -6, 30, 25, -19, -21, -41, -22, 29, 19, -29, 12, -32, 13, 15, 1, -16, 36, 25, -12, -13, -28, 33, 26, -27, 19, -14, -29, 27, -41, 11, -16, 13, 27, -44, -31, -10, -1, -16, 29, -35, -20, -19, -38, -13, 32, -36, -12, -36, -34, 10, 27, -36, -22, -33, 11, 0, 31, 16, 39, 14, 8, -45, 22, -44, -27, -9, -20, -36, -30, 9, 8, 6, -37, -8, -29, -15, -8, 12, -16, -10, 12, 32, -23, 25, -10, -35, 26, 32, -21, 25, -29, 12, 7, -3, 32, 8, 4, 15, 5, 11, -17, 17, -2, -24, 22, 22, -20, 37, -18, 46, -32, 19, 20, -25, 39, -24, 23, 5, 8, -13, -19, 32, -6, 39, -35, 30, -1, -12, -12, 16, 20, 6, 11, -53, 9, 3, 35, 3, -13, -28, -24, -70, -110, 41, 52, -25, -59, -22, -12, 22, 22, -18, -49, 36, -28, 113, 8, -6, 72, -79, 12, 50, 121, -5, -34, 18, 47, 29, -7, 36, 24, -38, 22, 14, 62, -25, -62, 25, 5, -23, 42, -32, 7, -49, 35, 31, -19, 19, 38, -30, -38, 22, -9, -15, -32, 6, -3, 8, 13, 14, -11, 11, 21, -47, 10, -25, 39, 25, -36, -51, 18, 14, -57, -1, -60, -23, 19, -29, 15, 5, -26, -10, 82, -44, -30, -21, 83, 45, 32, 101, 10, -64, -18, 84, -102, -93, 38, -18, 115, -52, 40, -20, 101, 10, 59, 69, -47, -100, 56, 28, -83, 35, -65, -23, 17, -11, 39, 47, -63, 55, 21, 5, -50, -49, -37, 88, 1, 53, -9, 90, 25, 83, -88, -28, 91, -88, -31, -36, -31, 88, -23, 43, -4, -68, 0, -26, -60, -8, 47, -78, -71, 52, -71, 67, 72, -42, 48, 25, -12, -43, -60, -71, 86, 98, -69, 84, -17, 16, -28, -61, 22, 12, -21, -70, -83, 27, 60, -18, -90, 30, 87, 14, -8, 46, -38, -10, -41, -37, -16, -43, 26, -26, -8, -37, 14, 30, 27, 48, 16, -46, 34, -41, 17, -17, 33, 24, -30, 13, 16, 46, -26, 4, 18, 10, 18, 50, -26, 49, -33, 16, 26, -7, -42, -27, 30, -37, 27, 37, 39, -25, 4, -2, -30, 9, 10, -18, -20, 1, 29, -37, 47, -33, -38, -14, -6, 16, 17, -32, -38, 43, -36, 23, 10, 34, -32, 33, 9, -14, -16, -27, 39, 23, -2, -41, -27, -24, -6, 0, 24, -23, -32, -45, -36, 1, 1, -7, 10, 9, -12, 38, 1, -28, -5, 23, -12, 12, -9, -1, 19, 27, -2, -11, 25, 23, 0, 20, -30, 0, 37, 37, 2, 22, -21, -9, -3, -5, 16, 16, 17, -11, -26, -27, 31, -12, 34, 33, 5, -15, 1, 36, -16, 34, -21, 31, -11, -6, 5, 18, -14, 23, -1, -16, 35, 22, 17, -1, 14, 5, 32, -21, -16, 27, -30, -5, 10, 5, 25, -28, 11, -7, 21, -30, 25, 7, -2, -5, 12, -11, -4, -33, -4, -22, 24, 29, -5, -26, 0, -27, -23, -14, 19, 22, -19, 5, -9, -21, 13, 46, 32, -8, 24, 41, 12, 44, -56, -32, -19, 16, -37, -23, -25, 24, 39, 40, 3, 0, 18, -41, 43, 15, 51, 3, -45, -2, 43, -36, 21, -56, -19, -26, -17, 60, 13, -43, -42, -50, 43, 11, -39, -31, -54, -43, 38, 19, -6, -44, 35, 4, 21, -9, -54, -41, -37, 18, -8, 9, -34, -9, 22, -55, 61, -29, 36, 33, 54, -48, -20, 22, -42, -15, 36, 53, 35, -12, 43, 36, 43, 44, 0, 42, 37, 6, 41, -32, 12, 46, -28, -25, -49, -28, -52, 22, -58, -28, 52, -30, 16, -10, -4, -3, 47, 28, -12, 14, 30, -21, -3, 26, 29, -13, 31, -13, 50, 17, -26, -26, -71, -51, -48, 5, -57, 25, 21, -52, -28, -49, 51, -6, 54, 36, 9, -16, -40, -18, 17, 17, -49, -10, -15, 16, -1, 31, 23, 25, -10, 66, -53, -23, 53, -1, 17, 11, 30, 9, -83, -64, -25, -41, -49, 1, 7, 6, -60, -49, 49, -48, -74, 50, -26, 8, 24, 26, -9, 1, -23, -3, 40, 29, -45, 22, 40, 51, -40, 26, -13, -25, -49, 44}

#define TENSOR_CONV1D_3_KERNEL_0_DEC_BITS {8}

#define TENSOR_CONV1D_3_BIAS_0 {60, -67, -46, -63, 58, 32, -21, 37, 59, -77, -57, 54}

#define TENSOR_CONV1D_3_BIAS_0_DEC_BITS {7}

#define CONV1D_3_BIAS_LSHIFT {4}

#define CONV1D_3_OUTPUT_RSHIFT {8}

#define TENSOR_GRU_GRU_CELL_KERNEL_0 {-23, -8, -10, 6, -41, -30, 12, -52, 24, -23, 23, 27, 8, -32, -18, 31, 4, -38, -3, -27, 14, 10, 9, -17, 8, 25, 14, 8, 6, -44, -3, -11, 8, -34, 5, -3, -32, 9, 28, 8, 37, 34, -47, -13, 19, -34, -39, -5, -7, -3, 6, -12, 18, 48, 6, -31, -29, -20, -50, 4, 32, -22, -21, -50, 19, 47, -41, -22, 18, 27, -40, -29, -43, 4, 33, -5, -65, 17, -27, 11, 60, 7, -24, -26, 47, -21, 29, 8, 10, 2, 27, 17, -4, 3, -3, -42, -14, 26, -47, -22, -3, 32, 24, -36, -55, -16, -20, -9, -24, -28, 9, 31, 9, -18, 17, -37, 4, -18, -12, 28, 34, 3, 28, 32, -16, -10, -26, 9, -15, -11, -37, -11, 2, 21, 2, -15, -28, 30, 10, 45, -40, -43, -39, -10, -8, 13, -43, 27, -2, 12, -27, 22, -24, -14, -2, 30, -16, -29, -40, -3, 45, -35, -11, -19, -17, -35, -14, 11, -48, 14, 30, 2, 14, 28, -18, -37, 27, -8, 8, 7, 49, -11, -40, 10, -25, 16, -20, -58, 18, -30, -21, -37, -5, -12, 3, 15, 25, -17, 41, -45, -1, 28, -74, 32, -16, 17, 51, 13, 24, -15, 23, 39, 10, 52, -4, 38, 28, 17, 1, -6, 33, -18, 25, 54, 13, 29, -12, 22, -22, 21, 20, 15, -37, -45, -10, 13, 6, -24, -44, 27, 54, 50, 15, -60, -3, 10, 2, -29, 2, -21, -8, -15, -19, -6, -31, -63, 66, 50, 22, 37, 29, 49, -19, 2, -24, -13, 18, 43, -9, -29, -6, 71, 38, 40, -24, -12, -9, 49, -74, -43, 18, -7, 55, 20, -51, -42, 7, -10, 39, 9, -25, -37, 69, 50, -14, 8, -8, -20, -13, -53, -42, -7, -15, -33, -2, -9, -1, -36, 14, 22, -3, 20, 21, -13, -12, 22, 13, 7, 78, -13, -23, 18, 23, 16, 70, 41, -67, 10, 22, -54, -24, 48, -54, 37, 8, 13, -39, 42, -4, -56, -31, -13, 49, -1, 57, -77, 0, -32, -23, -34, 26, -31, -24, -31, 18, 18, 6, 38, -20, 15, -9, -30, 44, 1, 46, -23, 2, -6, -9, -19, 27, 1, -33, 1, -6, -5, -4, -25, -21, 0, 4, -1, 40, 18, 34, 42, -27, -53, -13, 19, 5, -17, 22, -53, 26, 31, -1, -44, -2, -19, -11, -3, 6, 31, 16, 16, -1, -22, 33, 10, -3, 20, -6, 19, 21, 15, 17, 28, 2, -7, -25, 33, 23, -24, 36, -41, -16, -23, 42, -49, 16, -16, 42, 8, -20, 27, 11, 45, -13, 4, 11, -22, -36, -31, -44, 10, 7, -1, 24, -15, 6, -35, -19, -28, -7, 29, -43, -11, -10, -15, -35, -42, 22, 22, -17, -14, -25, -29, -2, 28, 5, 5, 15, 27, 14, -4, -27, 13, 10, -38, 0, 33, 9, -24, 35, 3, 43, -11, 36, 13, 42, -37, -21, 45, 15, -18, -22, -21, 13, 2, 38, -9, -9, 17, -5, -21, -16, 36, -28, 40, -21, 1, 3, 2, -36, -27, 25, -33, 45, 33, 23, -21, -6, -18, 47, 19, -3, 21, 7, -6, 15, -37, -9, -7, -22, -9, 19, -3, -15, 26, -46, 57, 6, 1, -11, 21, -9, 4, -2, -15, 35, 19, 22, -25, -40, -24, -10, -11, 21, -22, 26, -28, -29, -45, 4, -21, -34, -31, 26, 15, -26, 13, 12, 55, 28, -7}

#define TENSOR_GRU_GRU_CELL_KERNEL_0_DEC_BITS {7}

#define TENSOR_GRU_GRU_CELL_RECURRENT_KERNEL_0 {5, 40, -23, -31, 23, -9, -28, -19, 5, 46, -26, -53, 23, 6, -26, -11, 24, 12, 22, 29, -16, 28, 30, -3, -1, -23, 20, 26, -28, 9, 13, -17, 50, 4, -4, 5, 24, 40, -29, 33, -12, -6, 52, -1, -19, -23, 14, -2, -22, -24, 5, 1, 5, 11, -19, -13, -41, -4, 32, 27, -15, -5, 32, 23, 1, 19, 13, -5, 43, 5, -6, 1, 29, 5, 33, 26, 8, -19, 40, -18, -30, -18, -53, -35, -44, -85, -23, -14, -46, 26, -41, -3, -16, -13, -1, 11, -39, -36, -59, 28, -11, 11, -19, -23, 66, 8, 10, -17, 66, 5, -67, 27, 46, -12, -28, -15, 25, 23, -22, -35, -32, 29, -12, -70, -6, -31, -9, 28, -22, -13, -41, -15, 26, 2, 2, 6, 19, -20, -11, 47, 3, 5, 17, 22, 2, -25, -14, -36, -11, 4, 9, -13, 15, -26, -13, -15, 38, 16, -46, -29, 29, -11, 33, -5, -11, -21, -6, 17, -4, 6, -32, -34, -21, -11, -16, -7, 18, 38, -57, 30, 9, -38, 5, -2, 2, -17, -7, -58, 28, -15, 3, -12, 19, 15, 11, 11, -36, -32, -18, -16, 19, -9, 7, -38, 40, 21, 51, -37, -17, -19, -35, 25, -11, 8, -18, 20, -53, 26, 44, 40, -8, 5, -47, -7, 5, 8, -3, -36, -31, 48, -9, -33, 63, -18, 41, 30, -13, 11, -7, -9, 42, -1, 14, -2, -27, -23, 5, 16, -2, -15, 7, -24, -4, 10, -65, 7, 13, -11, 0, -15, -36, 13, 15, 40, 28, -10, -5, 4, -19, -18, 52, -2, 13, -13, -15, 29, 11, 17, 32, 1, -21, -10, 69, -27, 21, -18, -7, 28, 3, 24, 10, 17, 24, 33, 9, 55, 6, -1, 25, -25, -15, -25, -11, -7, 1, 3, 1, 43, -6, -54, 14, 22, -11, -6, 19, -9, 45, 47, -52, -28, 15, 2, 10, -10, -6, 4, 36, 25, -18, 25, 44, 14, -1, 8, 47, 23, -2, -34, -7, -6, 3, 2, 16, 26, -39, 22, -3, 31, -52, 14, -3, -22, -10, 25, -25, -1, -8, 5, 4, 12, 3, 10, -13, 61, -31, 18, -13, -10, -42, -14, 2, 7, -25, -24, 21, -15, 5, 30, -46, 27, 15, -11, 7, -39, 22, -23, 13, 4, 27, 16, 0, 29, 36, 9, -37, -5, -13, 57, -1, -29, 18, 45, 35, -25, 21, 11, -4, -22, -25, -7, -25, -30, 2, 15, 12, 56, 41, -2, -8, 25, -3, 20, 24, 28, 12, 56, 13, 21, -17, 16, -9, 32, 11, -3, 0, -14, -10, 9, 9, 1, -28, 28, 21, 9, 46, 19, -13, -11, -7, -16, -31, -40, -12, -28, 12, -25, 23, 22, -14, -7, 2, -19, 26, 40, 23, 26, 13, -15, -16, 12, -16, 39, -23, 34, -2, 27, -8, 40, -14, 37, -17, 28, -29, -2, -1, -22, -2, 68, 2, -26, -19, -13, -5, -2, -23, 1, -13, -27, -10, 6, 7, -27, 18, 14, -12, 6, -23, 33, -5, -10, -10, -30, 3, 9, -46, -8, -14, 10, 3, 5, -23, -8, -14, -21, 32, -14, -3, 24, 45, -2, -23, -1, -12, -25, -18, -49, 14, -15, -21, 2, -40, -25, 10, -5, 20, -33, -45, 12, -16, 3, 0, 3, 4, 29, 29, -2, 4, 18, 10, -21, -12, 4, -15, 6, 40, 6, 10, -11, 20, 3, 15, -28, 1, -7, 4, -24, -36, 5, 76, -12, -13, -4, 42, 16, 9, 4, 52, 1, -6, -25, 14, 42, 50, 51, 1, 23, -1, 33, 0, -16, 50, 19, 48, 38, 48, 12, -3, 15, -12, 13, 17, 24, -31, 8, 32, 16, -24, -7, -32, -12, 7, -49, -34, -43, -25, -4, -1, -26, -36, -7, 34, 20, 1, 5, -50, 9, 2, 32, -24, -48, 38, 43, 16, -5, 23, -25, 3, -28, 1, 11, 2, 29, 7, 4, -48, -31, 36, 10, 11, 20, -18, 17, 60, 3, 45, -6, 19, 26, -43, 13, -13, 22, 7, 24, 13, -13, -15, 23, -5, 29, -4, 20, -22, 27, 21, -4, 76, -3, -28, 15, 14, -29, -2, -43, -36, -29, 3, 11, -2, -46, 23, 2, 28, 27, 5, -13, -36, 4, 19, -20, 4, -6, -23, -6, -30, 35, 26, -12, 60, -52, -6, -5, -7, 12, -6, 4, 8, 33, -23, -4, -9, 0, 17, 28, -27, 35, 4, -14, 2, -9, -6, 31, 23, -16, -3, -11, 12, -27, -14, -8, 19, 10, 16, -12, 17, -20, -7, 2, -16, 12, -39, 28, 52, -5, 5, -3, 13, 29}

#define TENSOR_GRU_GRU_CELL_RECURRENT_KERNEL_0_DEC_BITS {7}

#define TENSOR_GRU_GRU_CELL_BIAS_0 {6, -46, -9, -23, 27, 8, 2, -7, -6, 3, -1, -2, 57, 27, -5, -54, 38, -9, -20, 20, 70, 21, 46, 44, 22, 2, 51, 47, 18, 2, 10, 26, 5, -5, 3, -11, -2, 11, -1, -7, 6, 4, 7, 7, -4, -4, -8, 7, 6, -46, -9, -23, 27, 8, 2, -7, -6, 3, -1, -2, 57, 27, -5, -54, 38, -9, -20, 20, 70, 21, 46, 44, 22, 2, 51, 47, 18, 2, 10, 26, 5, -7, 4, -12, 0, 10, -5, -6, 3, 7, 5, 7, -5, -3, -12, 8}

#define TENSOR_GRU_GRU_CELL_BIAS_0_DEC_BITS {8}

#define GRU_BIAS_LSHIFT {2}

#define GRU_OUTPUT_RSHIFT {3}

#define TENSOR_GRU_1_GRU_CELL_1_KERNEL_0 {-27, 71, 47, -53, -37, 67, 3, -34, -27, 16, 23, -25, -35, 20, -5, 13, -44, 2, 21, -5, -4, -56, 49, -9, 17, -49, 19, -37, 48, -38, -30, -5, 8, 9, -25, -42, -3, 47, -2, 9, 8, 3, 24, -3, -56, -5, 21, 35, 22, -17, -28, -9, -16, 6, 33, -44, -43, -31, -26, 36, 9, -16, -33, 34, 15, 50, -43, -38, -30, 56, 33, 14, -23, -34, 17, -51, 0, -6, -4, -24, -30, 41, -25, 55, -35, -40, 58, -20, -45, 19, -22, -17, -30, -45, 12, 40, -25, -33, -48, 45, -12, 40, -22, 17, 32, -29, -42, 51, 44, -8, 40, 34, 23, -26, 29, -13, -2, 9, 5, 32, 39, -5, 16, 43, -29, 36, -7, 37, 11, 73, 59, 50, -23, -29, 22, 37, -1, -52, 46, 22, -32, 10, 32, 50, 67, 53, 3, 27, -33, 32, -20, 31, 10, 59, 35, 0, -21, 45, -9, 47, -10, -18, 60, 44, -30, -59, 25, 44, -61, -11, 7, 35, 2, 33, -18, 20, -19, -2, 44, 24, -23, -53, 5, 14, 33, 70, -20, -15, 31, 82, -36, -43, -49, 23, -25, -50, -7, -31, -13, 86, -19, 24, 19, -6, 37, 37, 5, 83, 65, -22, 3, 8, 31, -3, 43, -23, 85, 9, 39, 24, 9, 59, 50, 25, 21, 0, 51, 30, 19, 30, 53, 80, -73, 3, -55, -30, 36, -59, 35, 17, -30, 37, -25, 32, -27, -63, -27, -28, 33, -44, -27, 31, 36, 75, -1, -64, -42, -2, 11, -43, -14, -17, -22, 14, -10, 46, 45, 50, -24, -7, -38, -19, -26, -48, 24, 30, 17, -36, 45, 1, 31, -6, -1, 34, 38, -28, -1, -40, -24, 34, 16, 13, 34, -17, -32, 17, -15, -10, -66, 26, 13, 49, 53, 48, 26, 2, -18, 25, -23, 19, 31, -9, 49, -20, -49, -35, -36, 2, 23, 17, -38, 39, -36, 9, -43, -1, 38, 23, -13, -10, 11, 8, -35, -11, 43, -16, -24, 53, 26, 28, 8, 22, -36, -41, 21, 41, 42, 13, -13, 19, 8, 42, 1, -29, -2, 44, -31, -13, -41, -7, -3, 22, -13, -12, -12, -27, -3, -8, 15, -14, 62, -24, 12, 26, 44, 43, -14, 34, 55, -33, -2, -27, -2, -26}

#define TENSOR_GRU_1_GRU_CELL_1_KERNEL_0_DEC_BITS {7}

#define TENSOR_GRU_1_GRU_CELL_1_RECURRENT_KERNEL_0 {-4, -29, -72, 18, 13, 16, 10, -40, 47, 61, -49, -40, -25, 54, -41, -1, -29, -6, 2, 25, 8, -5, 0, 5, -32, -21, 34, 13, 55, 61, 7, 16, 32, -19, 12, -24, -68, -48, 8, 19, -55, -25, 22, -4, 38, 28, -47, -28, 36, -27, -5, 56, 58, 13, -21, 9, -1, 31, 26, 18, 24, 34, -4, 5, -2, 52, 9, -21, -31, 50, -7, -42, -6, -8, -47, -5, -12, 20, 9, -22, -19, -50, 73, 76, -16, 9, -43, 70, -9, 42, -18, -15, -19, -14, -48, 44, 14, 8, -12, 14, 20, 4, -28, -56, 10, -13, 16, 15, 18, -23, -30, -7, -46, 5, -21, 29, 21, 3, 42, -12, -14, -14, -19, -40, 15, 52, 47, 16, 57, -41, 46, 44, 26, -93, -52, -35, -42, -6, -3, 106, -15, -4, -71, 44, -32, 3, -27, 23, 31, 7, 15, 23, 17, -36, 43, -54, -20, -3, -41, 17, 34, 24, 7, 9, 51, 34, -41, 8, -14, 13, -28, -11, 35, -21, -20, -28, -42, -3, 15, -13, 29, 46, -10, -8, 41, -29, -16, 0, 55, -6, -16, 18}

#define TENSOR_GRU_1_GRU_CELL_1_RECURRENT_KERNEL_0_DEC_BITS {7}

#define TENSOR_GRU_1_GRU_CELL_1_BIAS_0 {4, -23, -18, 34, 19, -2, 25, 67, 17, 69, 30, 36, -6, -9, 19, 38, -7, 1, 10, 8, -2, -1, -5, -3, 4, -23, -18, 34, 19, -2, 25, 67, 17, 69, 30, 36, -6, -9, 19, 38, -7, -1, 7, 6, -4, -2, -5, -4}

#define TENSOR_GRU_1_GRU_CELL_1_BIAS_0_DEC_BITS {8}

#define GRU_1_BIAS_LSHIFT {6}

#define GRU_1_OUTPUT_RSHIFT {7}

#define TENSOR_GRU_2_GRU_CELL_2_KERNEL_0 {-47, 31, -54, 7, -16, -53, 67, -61, -6, 18, -38, 77, -39, 12, 8, 17, -80, -13, -64, 22, 44, -29, -29, -17, -9, -70, -10, 22, 14, 5, 49, -6, -98, -78, 52, 59, -66, 57, 17, 45, 11, 59, 71, 40, -42, -28, -37, 54, 18, -53, -16, 44, -49, 28, 18, 32, 15, -7, 19, 11, -70, 49, -71, 16, 50, -24, -21, -30, 35, 14, -33, 7, -5, 19, -11, -11, -40, -3, -57, -44, 38, -31, 9, 33, 41, -74, 46, 52, 12, 36, 55, 53, 43, -34, -49, -64}

#define TENSOR_GRU_2_GRU_CELL_2_KERNEL_0_DEC_BITS {7}

#define TENSOR_GRU_2_GRU_CELL_2_RECURRENT_KERNEL_0 {20, 18, 58, 91, 49, -81, -1, -8, -50, -18, 53, -27, -19, 17, 56, 39, 8, -11, -46, -78, -5, 75, -21, -4, 54, -41, -42, -17, -14, -38, -14, 23, -7, -28, -19, 5, 5, -9, 23, 53, -19, -19, -46, -9, -39, 40, -80, 48}

#define TENSOR_GRU_2_GRU_CELL_2_RECURRENT_KERNEL_0_DEC_BITS {7}

#define TENSOR_GRU_2_GRU_CELL_2_BIAS_0 {93, 63, -59, -2, -17, -43, -8, 42, 2, -6, -11, 9, 93, 63, -59, -2, -17, -43, -8, 42, 3, -10, -11, 11}

#define TENSOR_GRU_2_GRU_CELL_2_BIAS_0_DEC_BITS {9}

#define GRU_2_BIAS_LSHIFT {5}

#define GRU_2_OUTPUT_RSHIFT {7}

#define TENSOR_DENSE_KERNEL_0 {}

#define TENSOR_DENSE_KERNEL_0_DEC_BITS {8}

#define TENSOR_DENSE_BIAS_0 {-13, -11, 13, 67, 56, -11, 2, -8, 5, 15, 8, 51, 32, 12, -8, 8}

#define TENSOR_DENSE_BIAS_0_DEC_BITS {10}

#define DENSE_BIAS_LSHIFT {5}

#define DENSE_OUTPUT_RSHIFT {12}

#define TENSOR_DENSE_1_KERNEL_0 {35, -43, -68, -19, 17, 62, -32, -55, -71, 38, -45, 20, 25, -20, 34, 44}

#define TENSOR_DENSE_1_KERNEL_0_DEC_BITS {7}

#define TENSOR_DENSE_1_BIAS_0 {-6}

#define TENSOR_DENSE_1_BIAS_0_DEC_BITS {7}

#define DENSE_1_BIAS_LSHIFT {0}

#define DENSE_1_OUTPUT_RSHIFT {7}


/* output q format for each layer */
#define INPUT_1_OUTPUT_DEC 7
#define INPUT_1_OUTPUT_OFFSET 0
#define CONV1D_OUTPUT_DEC 3
#define CONV1D_OUTPUT_OFFSET 0
#define CONV1D_1_OUTPUT_DEC 3
#define CONV1D_1_OUTPUT_OFFSET 0
#define CONV1D_2_OUTPUT_DEC 3
#define CONV1D_2_OUTPUT_OFFSET 0
#define BATCH_NORMALIZATION_OUTPUT_DEC 3
#define BATCH_NORMALIZATION_OUTPUT_OFFSET 0
#define BATCH_NORMALIZATION_1_OUTPUT_DEC 3
#define BATCH_NORMALIZATION_1_OUTPUT_OFFSET 0
#define BATCH_NORMALIZATION_2_OUTPUT_DEC 3
#define BATCH_NORMALIZATION_2_OUTPUT_OFFSET 0
#define RE_LU_OUTPUT_DEC 3
#define RE_LU_OUTPUT_OFFSET 0
#define RE_LU_1_OUTPUT_DEC 3
#define RE_LU_1_OUTPUT_OFFSET 0
#define RE_LU_2_OUTPUT_DEC 3
#define RE_LU_2_OUTPUT_OFFSET 0
#define MAX_POOLING1D_OUTPUT_DEC 3
#define MAX_POOLING1D_OUTPUT_OFFSET 0
#define MAX_POOLING1D_1_OUTPUT_DEC 3
#define MAX_POOLING1D_1_OUTPUT_OFFSET 0
#define MAX_POOLING1D_2_OUTPUT_DEC 3
#define MAX_POOLING1D_2_OUTPUT_OFFSET 0
#define CONCATENATE_OUTPUT_DEC 3
#define CONCATENATE_OUTPUT_OFFSET 0
#define CONV1D_3_OUTPUT_DEC 3
#define CONV1D_3_OUTPUT_OFFSET 0
#define BATCH_NORMALIZATION_3_OUTPUT_DEC 3
#define BATCH_NORMALIZATION_3_OUTPUT_OFFSET 0
#define MAX_POOLING1D_3_OUTPUT_DEC 3
#define MAX_POOLING1D_3_OUTPUT_OFFSET 0
#define GRU_OUTPUT_DEC 7
#define GRU_OUTPUT_OFFSET 0
#define GRU_1_OUTPUT_DEC 7
#define GRU_1_OUTPUT_OFFSET 0
#define GRU_2_OUTPUT_DEC 7
#define GRU_2_OUTPUT_OFFSET 0
#define FLATTEN_OUTPUT_DEC 7
#define FLATTEN_OUTPUT_OFFSET 0
#define DENSE_OUTPUT_DEC 3
#define DENSE_OUTPUT_OFFSET 0
#define RE_LU_3_OUTPUT_DEC 3
#define RE_LU_3_OUTPUT_OFFSET 0
#define DROPOUT_OUTPUT_DEC 3
#define DROPOUT_OUTPUT_OFFSET 0
#define DENSE_1_OUTPUT_DEC 3
#define DENSE_1_OUTPUT_OFFSET 0
#define ACTIVATION_OUTPUT_DEC 3
#define ACTIVATION_OUTPUT_OFFSET 0

/* bias shift and output shift for none-weighted layer */

/* tensors and configurations for each layer */
static int8_t nnom_input_data[1250] = {0};

const nnom_shape_data_t tensor_input_1_0_dim[] = {1250, 1};
const nnom_qformat_param_t tensor_input_1_0_dec[] = {7};
const nnom_qformat_param_t tensor_input_1_0_offset[] = {0};
const nnom_tensor_t tensor_input_1_0 = {
    .p_data = (void*)nnom_input_data,
    .dim = (nnom_shape_data_t*)tensor_input_1_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_input_1_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_input_1_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};

const nnom_io_config_t input_1_config = {
    .super = {.name = "input_1"},
    .tensor = (nnom_tensor_t*)&tensor_input_1_0
};
const int8_t tensor_conv1d_kernel_0_data[] = TENSOR_CONV1D_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_kernel_0_dim[] = {5, 1, 16};
const nnom_qformat_param_t tensor_conv1d_kernel_0_dec[] = TENSOR_CONV1D_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_kernel_0 = {
    .p_data = (void*)tensor_conv1d_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_bias_0_data[] = TENSOR_CONV1D_BIAS_0;

const nnom_shape_data_t tensor_conv1d_bias_0_dim[] = {16};
const nnom_qformat_param_t tensor_conv1d_bias_0_dec[] = TENSOR_CONV1D_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_bias_0 = {
    .p_data = (void*)tensor_conv1d_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_output_shift[] = CONV1D_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_bias_shift[] = CONV1D_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_config = {
    .super = {.name = "conv1d"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_bias_shift, 
    .filter_size = 16,
    .kernel_size = {5},
    .stride_size = {2},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_SAME
};
const int8_t tensor_conv1d_1_kernel_0_data[] = TENSOR_CONV1D_1_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_1_kernel_0_dim[] = {9, 1, 8};
const nnom_qformat_param_t tensor_conv1d_1_kernel_0_dec[] = TENSOR_CONV1D_1_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_1_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_1_kernel_0 = {
    .p_data = (void*)tensor_conv1d_1_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_1_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_1_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_1_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_1_bias_0_data[] = TENSOR_CONV1D_1_BIAS_0;

const nnom_shape_data_t tensor_conv1d_1_bias_0_dim[] = {8};
const nnom_qformat_param_t tensor_conv1d_1_bias_0_dec[] = TENSOR_CONV1D_1_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_1_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_1_bias_0 = {
    .p_data = (void*)tensor_conv1d_1_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_1_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_1_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_1_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_1_output_shift[] = CONV1D_1_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_1_bias_shift[] = CONV1D_1_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_1_config = {
    .super = {.name = "conv1d_1"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_1_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_1_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_1_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_1_bias_shift, 
    .filter_size = 8,
    .kernel_size = {9},
    .stride_size = {2},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_SAME
};
const int8_t tensor_conv1d_2_kernel_0_data[] = TENSOR_CONV1D_2_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_2_kernel_0_dim[] = {13, 1, 8};
const nnom_qformat_param_t tensor_conv1d_2_kernel_0_dec[] = TENSOR_CONV1D_2_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_2_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_2_kernel_0 = {
    .p_data = (void*)tensor_conv1d_2_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_2_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_2_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_2_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_2_bias_0_data[] = TENSOR_CONV1D_2_BIAS_0;

const nnom_shape_data_t tensor_conv1d_2_bias_0_dim[] = {8};
const nnom_qformat_param_t tensor_conv1d_2_bias_0_dec[] = TENSOR_CONV1D_2_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_2_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_2_bias_0 = {
    .p_data = (void*)tensor_conv1d_2_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_2_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_2_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_2_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_2_output_shift[] = CONV1D_2_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_2_bias_shift[] = CONV1D_2_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_2_config = {
    .super = {.name = "conv1d_2"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_2_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_2_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_2_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_2_bias_shift, 
    .filter_size = 8,
    .kernel_size = {13},
    .stride_size = {2},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_SAME
};

const nnom_pool_config_t max_pooling1d_config = {
    .super = {.name = "max_pooling1d"},
    .padding_type = PADDING_VALID,
    .output_shift = 0,
    .kernel_size = {4},
    .stride_size = {4},
    .num_dim = 1
};

const nnom_pool_config_t max_pooling1d_1_config = {
    .super = {.name = "max_pooling1d_1"},
    .padding_type = PADDING_VALID,
    .output_shift = 0,
    .kernel_size = {4},
    .stride_size = {4},
    .num_dim = 1
};

const nnom_pool_config_t max_pooling1d_2_config = {
    .super = {.name = "max_pooling1d_2"},
    .padding_type = PADDING_VALID,
    .output_shift = 0,
    .kernel_size = {4},
    .stride_size = {4},
    .num_dim = 1
};

const nnom_concat_config_t concatenate_config = {
    .super = {.name = "concatenate"},
    .axis = -1
};
const int8_t tensor_conv1d_3_kernel_0_data[] = TENSOR_CONV1D_3_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_3_kernel_0_dim[] = {3, 32, 12};
const nnom_qformat_param_t tensor_conv1d_3_kernel_0_dec[] = TENSOR_CONV1D_3_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_3_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_3_kernel_0 = {
    .p_data = (void*)tensor_conv1d_3_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_3_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_3_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_3_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_3_bias_0_data[] = TENSOR_CONV1D_3_BIAS_0;

const nnom_shape_data_t tensor_conv1d_3_bias_0_dim[] = {12};
const nnom_qformat_param_t tensor_conv1d_3_bias_0_dec[] = TENSOR_CONV1D_3_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_3_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_3_bias_0 = {
    .p_data = (void*)tensor_conv1d_3_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_3_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_3_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_3_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_3_output_shift[] = CONV1D_3_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_3_bias_shift[] = CONV1D_3_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_3_config = {
    .super = {.name = "conv1d_3"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_3_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_3_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_3_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_3_bias_shift, 
    .filter_size = 12,
    .kernel_size = {3},
    .stride_size = {1},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_SAME
};

const nnom_pool_config_t max_pooling1d_3_config = {
    .super = {.name = "max_pooling1d_3"},
    .padding_type = PADDING_VALID,
    .output_shift = 0,
    .kernel_size = {2},
    .stride_size = {2},
    .num_dim = 1
};
const int8_t tensor_gru_gru_cell_kernel_0_data[] = TENSOR_GRU_GRU_CELL_KERNEL_0;

const nnom_shape_data_t tensor_gru_gru_cell_kernel_0_dim[] = {12, 48};
const nnom_qformat_param_t tensor_gru_gru_cell_kernel_0_dec[] = TENSOR_GRU_GRU_CELL_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_gru_gru_cell_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_gru_gru_cell_kernel_0 = {
    .p_data = (void*)tensor_gru_gru_cell_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_gru_gru_cell_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_gru_gru_cell_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_gru_gru_cell_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_gru_gru_cell_recurrent_kernel_0_data[] = TENSOR_GRU_GRU_CELL_RECURRENT_KERNEL_0;

const nnom_shape_data_t tensor_gru_gru_cell_recurrent_kernel_0_dim[] = {16, 48};
const nnom_qformat_param_t tensor_gru_gru_cell_recurrent_kernel_0_dec[] = TENSOR_GRU_GRU_CELL_RECURRENT_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_gru_gru_cell_recurrent_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_gru_gru_cell_recurrent_kernel_0 = {
    .p_data = (void*)tensor_gru_gru_cell_recurrent_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_gru_gru_cell_recurrent_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_gru_gru_cell_recurrent_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_gru_gru_cell_recurrent_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_gru_gru_cell_bias_0_data[] = TENSOR_GRU_GRU_CELL_BIAS_0;

const nnom_shape_data_t tensor_gru_gru_cell_bias_0_dim[] = {2, 48};
const nnom_qformat_param_t tensor_gru_gru_cell_bias_0_dec[] = TENSOR_GRU_GRU_CELL_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_gru_gru_cell_bias_0_offset[] = {0};
const nnom_tensor_t tensor_gru_gru_cell_bias_0 = {
    .p_data = (void*)tensor_gru_gru_cell_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_gru_gru_cell_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_gru_gru_cell_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_gru_gru_cell_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};

const nnom_gru_cell_config_t gru_gru_cell_config = {
    .super = {.name = "gru"},
    .weights = (nnom_tensor_t*)&tensor_gru_gru_cell_kernel_0,
    .recurrent_weights = (nnom_tensor_t*)&tensor_gru_gru_cell_recurrent_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_gru_gru_cell_bias_0,
    .q_dec_z = 2,
    .q_dec_h = 7,
    .units = 16
};

const nnom_rnn_config_t gru_config = {
    .super = {.name = "gru"},
    .return_sequence = true,
    .stateful = false,
    .go_backwards = false
};
const int8_t tensor_gru_1_gru_cell_1_kernel_0_data[] = TENSOR_GRU_1_GRU_CELL_1_KERNEL_0;

const nnom_shape_data_t tensor_gru_1_gru_cell_1_kernel_0_dim[] = {16, 24};
const nnom_qformat_param_t tensor_gru_1_gru_cell_1_kernel_0_dec[] = TENSOR_GRU_1_GRU_CELL_1_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_gru_1_gru_cell_1_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_gru_1_gru_cell_1_kernel_0 = {
    .p_data = (void*)tensor_gru_1_gru_cell_1_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_gru_1_gru_cell_1_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_gru_1_gru_cell_1_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_gru_1_gru_cell_1_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_gru_1_gru_cell_1_recurrent_kernel_0_data[] = TENSOR_GRU_1_GRU_CELL_1_RECURRENT_KERNEL_0;

const nnom_shape_data_t tensor_gru_1_gru_cell_1_recurrent_kernel_0_dim[] = {8, 24};
const nnom_qformat_param_t tensor_gru_1_gru_cell_1_recurrent_kernel_0_dec[] = TENSOR_GRU_1_GRU_CELL_1_RECURRENT_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_gru_1_gru_cell_1_recurrent_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_gru_1_gru_cell_1_recurrent_kernel_0 = {
    .p_data = (void*)tensor_gru_1_gru_cell_1_recurrent_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_gru_1_gru_cell_1_recurrent_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_gru_1_gru_cell_1_recurrent_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_gru_1_gru_cell_1_recurrent_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_gru_1_gru_cell_1_bias_0_data[] = TENSOR_GRU_1_GRU_CELL_1_BIAS_0;

const nnom_shape_data_t tensor_gru_1_gru_cell_1_bias_0_dim[] = {2, 24};
const nnom_qformat_param_t tensor_gru_1_gru_cell_1_bias_0_dec[] = TENSOR_GRU_1_GRU_CELL_1_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_gru_1_gru_cell_1_bias_0_offset[] = {0};
const nnom_tensor_t tensor_gru_1_gru_cell_1_bias_0 = {
    .p_data = (void*)tensor_gru_1_gru_cell_1_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_gru_1_gru_cell_1_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_gru_1_gru_cell_1_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_gru_1_gru_cell_1_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};

const nnom_gru_cell_config_t gru_1_gru_cell_config = {
    .super = {.name = "gru_1"},
    .weights = (nnom_tensor_t*)&tensor_gru_1_gru_cell_1_kernel_0,
    .recurrent_weights = (nnom_tensor_t*)&tensor_gru_1_gru_cell_1_recurrent_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_gru_1_gru_cell_1_bias_0,
    .q_dec_z = 4,
    .q_dec_h = 7,
    .units = 8
};

const nnom_rnn_config_t gru_1_config = {
    .super = {.name = "gru_1"},
    .return_sequence = true,
    .stateful = false,
    .go_backwards = false
};
const int8_t tensor_gru_2_gru_cell_2_kernel_0_data[] = TENSOR_GRU_2_GRU_CELL_2_KERNEL_0;

const nnom_shape_data_t tensor_gru_2_gru_cell_2_kernel_0_dim[] = {8, 12};
const nnom_qformat_param_t tensor_gru_2_gru_cell_2_kernel_0_dec[] = TENSOR_GRU_2_GRU_CELL_2_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_gru_2_gru_cell_2_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_gru_2_gru_cell_2_kernel_0 = {
    .p_data = (void*)tensor_gru_2_gru_cell_2_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_gru_2_gru_cell_2_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_gru_2_gru_cell_2_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_gru_2_gru_cell_2_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_gru_2_gru_cell_2_recurrent_kernel_0_data[] = TENSOR_GRU_2_GRU_CELL_2_RECURRENT_KERNEL_0;

const nnom_shape_data_t tensor_gru_2_gru_cell_2_recurrent_kernel_0_dim[] = {4, 12};
const nnom_qformat_param_t tensor_gru_2_gru_cell_2_recurrent_kernel_0_dec[] = TENSOR_GRU_2_GRU_CELL_2_RECURRENT_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_gru_2_gru_cell_2_recurrent_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_gru_2_gru_cell_2_recurrent_kernel_0 = {
    .p_data = (void*)tensor_gru_2_gru_cell_2_recurrent_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_gru_2_gru_cell_2_recurrent_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_gru_2_gru_cell_2_recurrent_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_gru_2_gru_cell_2_recurrent_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_gru_2_gru_cell_2_bias_0_data[] = TENSOR_GRU_2_GRU_CELL_2_BIAS_0;

const nnom_shape_data_t tensor_gru_2_gru_cell_2_bias_0_dim[] = {2, 12};
const nnom_qformat_param_t tensor_gru_2_gru_cell_2_bias_0_dec[] = TENSOR_GRU_2_GRU_CELL_2_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_gru_2_gru_cell_2_bias_0_offset[] = {0};
const nnom_tensor_t tensor_gru_2_gru_cell_2_bias_0 = {
    .p_data = (void*)tensor_gru_2_gru_cell_2_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_gru_2_gru_cell_2_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_gru_2_gru_cell_2_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_gru_2_gru_cell_2_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};

const nnom_gru_cell_config_t gru_2_gru_cell_config = {
    .super = {.name = "gru_2"},
    .weights = (nnom_tensor_t*)&tensor_gru_2_gru_cell_2_kernel_0,
    .recurrent_weights = (nnom_tensor_t*)&tensor_gru_2_gru_cell_2_recurrent_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_gru_2_gru_cell_2_bias_0,
    .q_dec_z = 6,
    .q_dec_h = 7,
    .units = 4
};

const nnom_rnn_config_t gru_2_config = {
    .super = {.name = "gru_2"},
    .return_sequence = true,
    .stateful = false,
    .go_backwards = false
};

const nnom_flatten_config_t flatten_config = {
    .super = {.name = "flatten"}
};
const int8_t tensor_dense_kernel_0_data[] = TENSOR_DENSE_KERNEL_0;

const nnom_shape_data_t tensor_dense_kernel_0_dim[] = {312, 16};
const nnom_qformat_param_t tensor_dense_kernel_0_dec[] = TENSOR_DENSE_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_dense_kernel_0 = {
    .p_data = (void*)tensor_dense_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_dense_bias_0_data[] = TENSOR_DENSE_BIAS_0;

const nnom_shape_data_t tensor_dense_bias_0_dim[] = {16};
const nnom_qformat_param_t tensor_dense_bias_0_dec[] = TENSOR_DENSE_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_bias_0_offset[] = {0};
const nnom_tensor_t tensor_dense_bias_0 = {
    .p_data = (void*)tensor_dense_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t dense_output_shift[] = DENSE_OUTPUT_RSHIFT;
const nnom_qformat_param_t dense_bias_shift[] = DENSE_BIAS_LSHIFT;
const nnom_dense_config_t dense_config = {
    .super = {.name = "dense"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_dense_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_dense_bias_0,
    .output_shift = (nnom_qformat_param_t *)&dense_output_shift,
    .bias_shift = (nnom_qformat_param_t *)&dense_bias_shift
};
const int8_t tensor_dense_1_kernel_0_data[] = TENSOR_DENSE_1_KERNEL_0;

const nnom_shape_data_t tensor_dense_1_kernel_0_dim[] = {16, 1};
const nnom_qformat_param_t tensor_dense_1_kernel_0_dec[] = TENSOR_DENSE_1_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_1_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_dense_1_kernel_0 = {
    .p_data = (void*)tensor_dense_1_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_1_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_1_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_1_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_dense_1_bias_0_data[] = TENSOR_DENSE_1_BIAS_0;

const nnom_shape_data_t tensor_dense_1_bias_0_dim[] = {1};
const nnom_qformat_param_t tensor_dense_1_bias_0_dec[] = TENSOR_DENSE_1_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_1_bias_0_offset[] = {0};
const nnom_tensor_t tensor_dense_1_bias_0 = {
    .p_data = (void*)tensor_dense_1_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_1_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_1_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_1_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t dense_1_output_shift[] = DENSE_1_OUTPUT_RSHIFT;
const nnom_qformat_param_t dense_1_bias_shift[] = DENSE_1_BIAS_LSHIFT;
const nnom_dense_config_t dense_1_config = {
    .super = {.name = "dense_1"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_dense_1_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_dense_1_bias_0,
    .output_shift = (nnom_qformat_param_t *)&dense_1_output_shift,
    .bias_shift = (nnom_qformat_param_t *)&dense_1_bias_shift
};
static int8_t nnom_output_data[1] = {0};

const nnom_shape_data_t tensor_output0_dim[] = {1};
const nnom_qformat_param_t tensor_output0_dec[] = {ACTIVATION_OUTPUT_DEC};
const nnom_qformat_param_t tensor_output0_offset[] = {0};
const nnom_tensor_t tensor_output0 = {
    .p_data = (void*)nnom_output_data,
    .dim = (nnom_shape_data_t*)tensor_output0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_output0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_output0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_io_config_t output0_config = {
    .super = {.name = "output0"},
    .tensor = (nnom_tensor_t*)&tensor_output0
};
/* model version */
#define NNOM_MODEL_VERSION (10000*0 + 100*4 + 3)

/* nnom model */
static nnom_model_t* nnom_model_create(void)
{
	static nnom_model_t model;
	nnom_layer_t* layer[22];

	check_model_version(NNOM_MODEL_VERSION);
	new_model(&model);

	layer[0] = input_s(&input_1_config);
	layer[1] = model.hook(conv2d_s(&conv1d_config), layer[0]);
	layer[2] = model.hook(conv2d_s(&conv1d_1_config), layer[0]);
	layer[3] = model.hook(conv2d_s(&conv1d_2_config), layer[0]);
	layer[4] = model.active(act_relu(), layer[1]);
	layer[5] = model.active(act_relu(), layer[2]);
	layer[6] = model.active(act_relu(), layer[3]);
	layer[7] = model.hook(maxpool_s(&max_pooling1d_config), layer[4]);
	layer[8] = model.hook(maxpool_s(&max_pooling1d_1_config), layer[5]);
	layer[9] = model.hook(maxpool_s(&max_pooling1d_2_config), layer[6]);
	layer[10] = model.mergex(concat_s(&concatenate_config), 3 ,layer[7] ,layer[8] ,layer[9]);
	layer[11] = model.hook(conv2d_s(&conv1d_3_config), layer[10]);
	layer[12] = model.hook(maxpool_s(&max_pooling1d_3_config), layer[11]);
	layer[13] = model.hook(rnn_s(gru_cell_s(&gru_gru_cell_config), &gru_config), layer[12]);
	layer[14] = model.hook(rnn_s(gru_cell_s(&gru_1_gru_cell_config), &gru_1_config), layer[13]);
	layer[15] = model.hook(rnn_s(gru_cell_s(&gru_2_gru_cell_config), &gru_2_config), layer[14]);
	layer[16] = model.hook(flatten_s(&flatten_config), layer[15]);
	layer[17] = model.hook(dense_s(&dense_config), layer[16]);
	layer[18] = model.active(act_relu(), layer[17]);
	layer[19] = model.hook(dense_s(&dense_1_config), layer[18]);
	layer[20] = model.active(act_sigmoid(DENSE_1_OUTPUT_DEC), layer[19]);
	layer[21] = model.hook(output_s(&output0_config), layer[20]);
	model_compile(&model, layer[0], layer[21]);
	return &model;
}
